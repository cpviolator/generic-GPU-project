/**
   @file quda_define.h
   @brief Macros defined set by the cmake build system.  This file
   should not be edited manually.
 */

/**
 * @def   __COMPUTE_CAPABILITY__
 * @brief This macro sets the target GPU architecture, which is
 * defined on both host and device.
 */
#define __COMPUTE_CAPABILITY__ @QUDA_COMPUTE_CAPABILITY@0

/**
 * @def   MAX_MULTI_RHS
 * @brief This macro sets the limit of RHS the multi-blas
 * and multi-reduce kernels
 */
#define MAX_MULTI_RHS @QUDA_MAX_MULTI_RHS@

#cmakedefine QUDA_HETEROGENEOUS_ATOMIC
#ifdef QUDA_HETEROGENEOUS_ATOMIC
/**
 * @def   HETEROGENEOUS_ATOMIC
 * @brief This macro sets whether we are compiling QUDA with heterogeneous atomic
 * support enabled or not
 */
#define HETEROGENEOUS_ATOMIC
#undef QUDA_HETEROGENEOUS_ATOMIC
#endif

#cmakedefine QUDA_LARGE_KERNEL_ARG


/**
 * @def QUDA_ORDER_FP
 * @brief This macro sets the data ordering for Wilson, gauge
 * (recon-8/9) and clover fixed-point fields
 */
#define QUDA_ORDER_FP @QUDA_ORDER_FP@

#ifdef __cplusplus
static_assert(QUDA_ORDER_FP == 4 || QUDA_ORDER_FP == 8, "invalid QUDA_ORDER_FP");
#endif

/**
 * @def QUDA_ORDER_SP
 * @brief This macro sets the data ordering for single-precision multigrid fields
 */
#define QUDA_ORDER_SP_MG @QUDA_ORDER_SP_MG@

#ifdef __cplusplus
static_assert(QUDA_ORDER_SP_MG == 2 || QUDA_ORDER_SP_MG == 4, "invalid QUDA_ORDER_SP_MG");
#endif

/**
 * @def QUDA_ORDER_FP_MG
 * @brief This macro sets the data ordering for fixed-point multigrid fields
 */
#define QUDA_ORDER_FP_MG @QUDA_ORDER_FP_MG@

#ifdef __cplusplus
static_assert(QUDA_ORDER_FP_MG == 2 || QUDA_ORDER_FP_MG == 4 || QUDA_ORDER_FP_MG == 8, "invalid QUDA_ORDER_FP_MG");
#endif

/**
 * @def QUDA_BUILD_NATIVE_FFT
 * @brief This macro is set by CMake if the native FFT library is used
 */
#cmakedefine QUDA_BUILD_NATIVE_FFT @QUDA_BUILD_NATIVE_FFT@

/**
 * @def QUDA_TARGET_CUDA
 * @brief This macro is set by CMake if the CUDA Build Target is selected
 */
#cmakedefine QUDA_TARGET_CUDA @QUDA_TARGET_CUDA@

/**
 * @def QUDA_TARGET_HIP
 * @brief This macro is set by CMake if the HIP Build target is selected
 */
#cmakedefine QUDA_TARGET_HIP @QUDA_TARGET_HIP@

/**
 * @def QUDA_TARGET_SYCL
 * @brief This macro is set by CMake if the SYCL Build target is selected
 */
#cmakedefine QUDA_TARGET_SYCL @QUDA_TARGET_SYCL@

#if !defined(QUDA_TARGET_CUDA) && !defined(QUDA_TARGET_HIP) && !defined(QUDA_TARGET_SYCL)
#error "No QUDA_TARGET selected"
#endif
